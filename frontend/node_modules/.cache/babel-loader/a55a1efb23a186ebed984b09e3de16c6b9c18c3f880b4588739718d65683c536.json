{"ast":null,"code":"const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:8000';\nexport async function login(email, password) {\n  const form = new URLSearchParams();\n  form.append('username', email);\n  form.append('password', password);\n  const res = await fetch(`${API_BASE}/auth/login`, {\n    method: 'POST',\n    body: form\n  });\n  if (!res.ok) throw new Error('Login failed');\n  return res.json();\n}\nexport async function register(data) {\n  const res = await fetch(`${API_BASE}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error('Register failed');\n  return res.json();\n}\nexport async function listSites() {\n  const res = await fetch(`${API_BASE}/sites/`);\n  return res.json();\n}\nexport async function createSite(token, payload) {\n  const res = await fetch(`${API_BASE}/sites/`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) throw new Error('Create site failed');\n  return res.json();\n}\nexport async function uploadMedia(token, siteId, type, file, title = '') {\n  const fd = new FormData();\n  fd.append('site_id', siteId);\n  fd.append('type', type);\n  fd.append('title', title);\n  fd.append('file', file);\n  const res = await fetch(`${API_BASE}/media/upload`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: fd\n  });\n  if (!res.ok) throw new Error('Upload failed');\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","import","meta","env","VITE_API_BASE","login","email","password","form","URLSearchParams","append","res","fetch","method","body","ok","Error","json","register","data","headers","JSON","stringify","listSites","createSite","token","payload","uploadMedia","siteId","type","file","title","fd","FormData"],"sources":["C:/Users/Admin/Desktop/free-lancer/jornal/frontend/src/api.js"],"sourcesContent":["\nconst API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:8000'\n\nexport async function login(email, password) {\n  const form = new URLSearchParams()\n  form.append('username', email)\n  form.append('password', password)\n  const res = await fetch(`${API_BASE}/auth/login`, { method:'POST', body: form })\n  if(!res.ok) throw new Error('Login failed')\n  return res.json()\n}\n\nexport async function register(data) {\n  const res = await fetch(`${API_BASE}/auth/register`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(data) })\n  if(!res.ok) throw new Error('Register failed')\n  return res.json()\n}\n\nexport async function listSites() {\n  const res = await fetch(`${API_BASE}/sites/`)\n  return res.json()\n}\n\nexport async function createSite(token, payload) {\n  const res = await fetch(`${API_BASE}/sites/`, { method:'POST', headers:{'Authorization':`Bearer ${token}`, 'Content-Type':'application/json'}, body: JSON.stringify(payload) })\n  if(!res.ok) throw new Error('Create site failed')\n  return res.json()\n}\n\nexport async function uploadMedia(token, siteId, type, file, title='') {\n  const fd = new FormData()\n  fd.append('site_id', siteId)\n  fd.append('type', type)\n  fd.append('title', title)\n  fd.append('file', file)\n  const res = await fetch(`${API_BASE}/media/upload`, { method:'POST', headers:{'Authorization':`Bearer ${token}`}, body: fd })\n  if(!res.ok) throw new Error('Upload failed')\n  return res.json()\n}\n"],"mappings":"AACA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,aAAa,IAAI,uBAAuB;AAEzE,OAAO,eAAeC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMC,IAAI,GAAG,IAAIC,eAAe,CAAC,CAAC;EAClCD,IAAI,CAACE,MAAM,CAAC,UAAU,EAAEJ,KAAK,CAAC;EAC9BE,IAAI,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;EACjC,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,aAAa,EAAE;IAAEa,MAAM,EAAC,MAAM;IAAEC,IAAI,EAAEN;EAAK,CAAC,CAAC;EAChF,IAAG,CAACG,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EAC3C,OAAOL,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,QAAQA,CAACC,IAAI,EAAE;EACnC,MAAMR,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,gBAAgB,EAAE;IAAEa,MAAM,EAAC,MAAM;IAAEO,OAAO,EAAC;MAAC,cAAc,EAAC;IAAkB,CAAC;IAAEN,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACH,IAAI;EAAE,CAAC,CAAC;EAChJ,IAAG,CAACR,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EAC9C,OAAOL,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeM,SAASA,CAAA,EAAG;EAChC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,SAAS,CAAC;EAC7C,OAAOW,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeO,UAAUA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC/C,MAAMf,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,SAAS,EAAE;IAAEa,MAAM,EAAC,MAAM;IAAEO,OAAO,EAAC;MAAC,eAAe,EAAC,UAAUK,KAAK,EAAE;MAAE,cAAc,EAAC;IAAkB,CAAC;IAAEX,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACI,OAAO;EAAE,CAAC,CAAC;EAC/K,IAAG,CAACf,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EACjD,OAAOL,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeU,WAAWA,CAACF,KAAK,EAAEG,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,GAAC,EAAE,EAAE;EACrE,MAAMC,EAAE,GAAG,IAAIC,QAAQ,CAAC,CAAC;EACzBD,EAAE,CAACtB,MAAM,CAAC,SAAS,EAAEkB,MAAM,CAAC;EAC5BI,EAAE,CAACtB,MAAM,CAAC,MAAM,EAAEmB,IAAI,CAAC;EACvBG,EAAE,CAACtB,MAAM,CAAC,OAAO,EAAEqB,KAAK,CAAC;EACzBC,EAAE,CAACtB,MAAM,CAAC,MAAM,EAAEoB,IAAI,CAAC;EACvB,MAAMnB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,eAAe,EAAE;IAAEa,MAAM,EAAC,MAAM;IAAEO,OAAO,EAAC;MAAC,eAAe,EAAC,UAAUK,KAAK;IAAE,CAAC;IAAEX,IAAI,EAAEkB;EAAG,CAAC,CAAC;EAC7H,IAAG,CAACrB,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAC5C,OAAOL,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}